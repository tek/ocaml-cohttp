load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@obazl_rules_ocaml//ocaml:rules.bzl", "ocaml_yacc", "ocaml_lex")
load("@obazl_rules_ocaml//dsl:library.bzl", "lib", "mod", "sig")

ocaml_yacc(name = "accept_parser_ml", src = "accept_parser.mly")
ocaml_lex(name = "accept_lexer_ml", src = "accept_lexer.mll")

write_file(
    name = "conf_src",
    out = "conf.ml",
    content = ['let version = "%{version:cohttp}"'],
)

genrule(
    name = "gen_code",
    srcs = ["//cohttp/scripts:codes"],
    outs = ["code.ml", "code.mli"],
    cmd = "mkdir -p work/codes src && cp $(execpaths //cohttp/scripts:codes) work/codes/ && cd work && ../$(execpath //cohttp/scripts:generate_codes) && mv ../src/code.* ../$(RULEDIR)",
    tools = ["//cohttp/scripts:generate_codes"],
)

lib(
    name = "cohttp-internal",
    deps_opam = [
        "re",
        "stringext",
        "sexplib0",
        "bytes",
        "base64",
    ],
    modules = dict(
        accept = sig(":accept_types", ":accept_parser", ":accept_lexer"),
        accept_types = mod(),
        accept_parser = mod(":accept_types", mod = ":accept_parser_ml"),
        accept_lexer = mod(":accept_types", ":accept_parser", mod = ":accept_lexer_ml"),
    ),
    opts = [
        "-w",
        "-33",
    ],
    deps = [
        "@uri//lib:lib-uri",
        "@uri//lib_sexp:lib-uri-sexp",
    ],
    ppx = dict(deps = ["ppx_sexp_conv"]),
    ns = False,
)

lib(
    name = "cohttp",
    deps_opam = [
        "re",
        "stringext",
        "sexplib0",
        "bytes",
        "base64",
    ],
    modules = dict(
        auth = sig(),
        body = sig(":s"),
        code = sig(),
        cohttp = mod(":accept", ":auth", ":body", ":connection", ":cookie", ":request", ":response", ":path"),
        conf = mod(),
        connection = sig(),
        cookie = sig(":header"),
        header_io = sig(":s", ":transfer_io"),
        header = sig(":accept", ":transfer", ":auth", ":link", ":conf"),
        link = sig(),
        path = sig(),
        request = sig(":s", ":header_io"),
        response = sig(":s", ":header_io"),
        s = mod(":transfer", ":header", ":code"),
        string_io = sig(":s"),
        transfer_io = sig(":transfer", ":s"),
        transfer = sig(),
    ),
    opts = [
        "-w",
        "-33",
    ],
    deps = [
        ":lib-cohttp-internal",
        "@uri//lib:lib-uri",
        "@uri//lib_sexp:lib-uri-sexp",
    ],
    ppx = dict(deps = ["ppx_sexp_conv"]),
)
